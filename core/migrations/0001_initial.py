# Generated by Django 4.2.4 on 2024-06-08 08:00

import core.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.utils.timezone
import django_extensions.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='registration date')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='modification of model')),
                ('created_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Email of user who creates model')),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Email of user who creates model')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SchoolBaseModel',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, verbose_name='status')),
                ('activate_date', models.DateTimeField(blank=True, help_text='keep empty for an immediate activation', null=True)),
                ('deactivate_date', models.DateTimeField(blank=True, help_text='keep empty for indefinite activation', null=True)),
                ('deleted', models.DateTimeField(db_index=True, editable=False, null=True)),
                ('deleted_by_cascade', models.BooleanField(default=False, editable=False)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='registration date')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='modification of model')),
                ('created_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Email of user who creates model')),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Email of user who creates model')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Optional. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='images')),
                ('phone', models.CharField(max_length=20, null=True, verbose_name='Mobile contact number')),
                ('phone_alt', models.CharField(blank=True, max_length=20, null=True, verbose_name='Alternate contact information')),
                ('address', models.CharField(blank=True, max_length=256, null=True, verbose_name='location of residence of user')),
                ('role', models.CharField(blank=True, choices=[('teacher', 'Teacher'), ('accountant', 'Accountant'), ('secretary', 'Secretary'), ('student', 'Student'), ('guardian', 'Guardian'), ('admin', 'Admin'), ('cleaner', 'Cleaner'), ('librarian', 'Librarian'), ('driver', 'Driver'), ('cook', 'Cook'), ('gardener', 'Gardener'), ('security', 'Security'), ('nurse', 'Nurse'), ('counselor', 'Counselor'), ('other', 'Other')], max_length=50, null=True, verbose_name='User role')),
                ('bio', models.CharField(blank=True, max_length=50, null=True, verbose_name='Some content about user')),
                ('address_alt', models.CharField(blank=True, max_length=256, null=True, verbose_name='location of residence of user')),
                ('school_code', models.CharField(blank=True, max_length=15, verbose_name='Code from school where user belongs')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_verified', models.BooleanField(default=False, help_text='Designates whether this user email is verified ', verbose_name='email_verified')),
                ('schools', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='list of school tenants'), default=list, size=None)),
                ('school', models.CharField(default='university', max_length=250, verbose_name='name of school')),
                ('gender', models.CharField(blank=True, max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', core.models.customUserManager()),
            ],
        ),
    ]
