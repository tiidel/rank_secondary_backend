# Generated by Django 4.2.4 on 2025-03-31 06:06

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import helper.enum


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100, verbose_name='e.g form one or lower sixth')),
                ('formal_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='e.g form one or lower sixth')),
                ('enrolment', models.IntegerField(default=0)),
                ('class_range', models.CharField(max_length=50, verbose_name='Approximate number of students in class')),
                ('h_o_d', models.CharField(blank=True, max_length=100, null=True)),
                ('full_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='e.g form one or lower sixth')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('general', 'General'), ('technical', 'Technical'), ('commercial', 'Commercial'), ('Other', 'Other')], max_length=255, verbose_name='Education type e.g General, Technical')),
                ('language_supports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100, verbose_name='List of languages that the school uses'), default=list, size=None)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Event Name')),
                ('start_date', models.DateField(auto_now_add=True, verbose_name='Date event is expected to start')),
                ('end_date', models.DateField(verbose_name='Date event ends')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='Guardian',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.basemodel')),
                ('type', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('uncle', 'Uncle'), ('aunt', 'Aunt'), ('other', 'Other')], max_length=256, verbose_name='guardian type e.g Mother, Aunty, cousin')),
                ('alt_mail', models.EmailField(blank=True, max_length=256, null=True)),
                ('city', models.CharField(blank=True, max_length=256, null=True, verbose_name='City/town of residence of guardian')),
            ],
            options={
                'verbose_name': 'Guardian',
                'verbose_name_plural': 'Guardians',
            },
            bases=('core.basemodel',),
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.basemodel')),
                ('name', helper.enum.HumanReadableChoiceField(choices=[('nursery', 'Nursery'), ('primary', 'Primary'), ('middleschool', 'Middle School'), ('form', 'Form'), ('grade', 'Grade'), ('level', 'Level'), ('juniorhigh', 'Junior High'), ('highschool', 'High School')], max_length=50, verbose_name='Levels in the school e.g Elementary, primary or secondary ')),
                ('departments', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.department')),
            ],
            options={
                'verbose_name': 'Level',
                'verbose_name_plural': 'Levels',
            },
            bases=('core.basemodel',),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('installment_number', models.IntegerField(blank=True, null=True)),
                ('amount', models.IntegerField()),
                ('transaction_count', models.IntegerField(default=0)),
                ('payment_date', models.DateField(auto_now_add=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status', models.CharField(blank=True, max_length=20, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('depositor', models.CharField(blank=True, max_length=20, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_gateway', models.CharField(blank=True, max_length=50, null=True)),
                ('currency', models.CharField(blank=True, max_length=3, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_confirmation_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='create date')),
                ('created_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Email of user who creates model')),
                ('receiver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Fee',
                'verbose_name_plural': 'Fees',
            },
        ),
        migrations.CreateModel(
            name='PaymentDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paypal_email', models.EmailField(blank=True, max_length=256, null=True, verbose_name='Paypal email address')),
                ('bank', models.CharField(blank=True, max_length=256, null=True, verbose_name='Bank account')),
                ('swift', models.CharField(blank=True, max_length=50, null=True, verbose_name='Swift code for bank')),
                ('account_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Account number in bank')),
                ('mtn_momo', models.CharField(blank=True, max_length=20, null=True, verbose_name='Mobile money number')),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.basemodel')),
                ('academic_start', models.DateField(verbose_name='Date school starts')),
                ('academic_end', models.DateField(verbose_name='Date school closes')),
                ('is_active', models.BooleanField(default=True, verbose_name='Date program should terminate')),
                ('events', models.ManyToManyField(to='school.event', verbose_name='name')),
            ],
            options={
                'verbose_name': 'Program',
                'verbose_name_plural': 'Programs',
                'ordering': ['-academic_end'],
            },
            bases=('core.basemodel',),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.basemodel')),
                ('fee_type', models.CharField(blank=True, max_length=15, null=True)),
                ('transaction_count', models.IntegerField(default=0)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('expected_ammount', models.IntegerField(null=True, verbose_name='The amount student is expected to pay for the class')),
                ('payed_ammount', models.IntegerField(default=0, verbose_name='Money student has actually paid for the school year')),
                ('registration_status', models.CharField(choices=[('none', 'None'), ('first', 'First'), ('second', 'Second'), ('complete', 'Complete')], max_length=50, null=True, verbose_name='fee installment. partial or complete')),
                ('paid_charges', models.BooleanField(default=False, verbose_name='Check if user has paid their platform charge before proceeding with registration')),
                ('is_registered', models.BooleanField(default=False, verbose_name='Given a school calendar, the date registration expires')),
                ('registration_date', models.DateField(auto_now=True)),
                ('registration_expiry_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('service_charge_status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid')], default='pending', max_length=10)),
                ('payments', models.ManyToManyField(related_name='registrationPayment', to='school.payment')),
            ],
            options={
                'verbose_name': 'Registration',
                'verbose_name_plural': 'Registrations',
            },
            bases=('core.basemodel',),
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('schoolbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.schoolbasemodel')),
                ('name', models.CharField(max_length=2560, verbose_name='School Name')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('country_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='e.g +237 or +1')),
                ('principal_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Dean of School')),
                ('principal_email', models.CharField(blank=True, max_length=100, null=True)),
                ('director_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Director of School')),
                ('director_email', models.CharField(blank=True, max_length=100, null=True)),
                ('director_phone', models.CharField(blank=True, max_length=100, null=True)),
                ('school_code', models.SlugField(editable=False, unique=True)),
                ('city', models.CharField(max_length=100, verbose_name='Region of school')),
                ('address', models.CharField(max_length=256, verbose_name='School Location')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='media/')),
                ('student_reg_charge', models.IntegerField(default=1000, null=True, verbose_name='The amount school sets for students to pay as system charges')),
                ('type', models.CharField(max_length=256, null=True, verbose_name='School type e.g Elementary, Primary etc...')),
                ('report_card', models.CharField(blank=True, max_length=100, null=True, verbose_name='String identifying selected report card design')),
                ('billing_method', models.CharField(max_length=50, verbose_name='selected payment method e.g paypal or MTN')),
                ('active', models.BooleanField(default=False, verbose_name='School server is active')),
                ('email', models.EmailField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('plan', models.CharField(choices=[('free', 'Free'), ('standard', 'Standard'), ('premium', 'Premium'), ('promo', 'Promo')], default='Free', max_length=20, verbose_name='Plan school is subscribed to e.g Free, standard or premium')),
                ('verification_doc', models.FileField(blank=True, null=True, upload_to='document', validators=[django.core.validators.FileExtensionValidator(['pdf', 'txt', 'docx'])])),
                ('is_verified', models.BooleanField(default=False, verbose_name='Sets if school document is valid')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is this school subscription currently active')),
            ],
            options={
                'verbose_name': 'School',
                'verbose_name_plural': 'School',
            },
            bases=('core.schoolbasemodel',),
        ),
        migrations.CreateModel(
            name='SchoolStaffApply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='images')),
                ('phone', models.CharField(max_length=20, null=True, verbose_name='Mobile contact number')),
                ('role', models.CharField(max_length=256, verbose_name='Role he/she is applying for')),
                ('tenant', models.CharField(max_length=50, verbose_name='School you are applying into')),
                ('is_accepted', models.BooleanField(default=False, verbose_name='Displays whether or not user is accepted into school')),
                ('hidden', models.BooleanField(default=False, verbose_name='Whether or not admin wants this to display')),
            ],
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name of the sequence e.g first sequence, second sequence')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Date sequence starts')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Date sequence ends')),
            ],
            options={
                'verbose_name': 'Sequence',
                'verbose_name_plural': 'Sequences',
            },
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.CharField(default='https://fb.com/tiidel', max_length=150, verbose_name='facebook profile link')),
                ('twitter', models.CharField(default='https://x.com/tiidel', max_length=150, verbose_name='twitter profile link')),
                ('instagram', models.CharField(default='https://instagram.com/tiidel', max_length=150, verbose_name='instagram profile link')),
                ('linkedin', models.CharField(default='https://linkedin.com/tiidel', max_length=150, verbose_name='linkedin profile link')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.basemodel')),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('accountant', 'Accountant'), ('secretary', 'Secretary'), ('student', 'Student'), ('guardian', 'Guardian'), ('admin', 'Admin'), ('cleaner', 'Cleaner'), ('librarian', 'Librarian'), ('driver', 'Driver'), ('cook', 'Cook'), ('gardener', 'Gardener'), ('security', 'Security'), ('nurse', 'Nurse'), ('counselor', 'Counselor'), ('other', 'Other')], max_length=256, verbose_name='type e.g Teacher, Administrator')),
                ('expirience', models.IntegerField(default=0, verbose_name='Years of expirience in post')),
                ('city', models.CharField(max_length=256, verbose_name='City/town of residence of guardian')),
                ('billing_method', models.CharField(max_length=50, verbose_name='Prefered payment method e.g paypal or MTN')),
                ('bio', models.CharField(blank=True, max_length=3000)),
                ('bank_account', models.CharField(blank=True, max_length=3000)),
                ('swift_code', models.CharField(blank=True, max_length=3000)),
                ('salary', models.IntegerField(default=0, verbose_name='salary')),
                ('is_active', models.BooleanField(default=True, verbose_name='If staff member is currently active in their role')),
                ('recruit_date', models.DateField(blank=True, null=True, verbose_name='When they commenced work at the role ')),
                ('days_without_pay', models.IntegerField(default=0, verbose_name='Number of days since staff was payed')),
                ('payment_method', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='school.paymentdetail', verbose_name='')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=('core.basemodel',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=50, verbose_name='Marital status')),
                ('matricule', models.CharField(blank=True, max_length=25, null=True, verbose_name='Generate unique matricule for student')),
                ('bio', models.CharField(blank=True, max_length=3000)),
                ('adm_status', models.BooleanField(default=True)),
                ('department', models.CharField(max_length=256)),
                ('admission_date', models.DateField(auto_now_add=True, verbose_name='Date person was admitted as a student')),
                ('place_of_birth', models.CharField(blank=True, max_length=256, null=True, verbose_name='Location where student was borne')),
                ('is_repeater', models.BooleanField(default=False, verbose_name='Student has repeated this class')),
                ('is_new_student', models.BooleanField(default=True, verbose_name='Is this a transfer or new student in this school')),
                ('academic_year', models.CharField(blank=True, max_length=256, null=True, verbose_name='Academic year of student')),
                ('medical_condition', models.CharField(blank=True, max_length=256, null=True, verbose_name='Medical condition of student')),
                ('emergency_contact', models.CharField(blank=True, max_length=256, null=True, verbose_name='Emergency contact of student')),
                ('qualification', models.CharField(blank=True, max_length=256, null=True, verbose_name='Maximum qualification of student')),
                ('guardians', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_guardians', to='school.guardian')),
                ('student_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.class')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('sub_coef', models.IntegerField(default=1, verbose_name='Value of the subject (coefficient)')),
                ('course_duration', models.IntegerField(blank=True, null=True, verbose_name='number of hours')),
                ('cls', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.class')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='school.staff')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.level')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField()),
                ('payment_date', models.DateField(auto_now_add=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status', models.CharField(blank=True, max_length=20, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('transaction_count', models.IntegerField(default=0)),
                ('subscription_plan', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='create date')),
                ('created_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Email of user who creates model')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Terms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_name', models.CharField(max_length=100, verbose_name='Name of the term e.g first term, second term')),
                ('start_date', models.DateField(verbose_name='Date term starts')),
                ('end_date', models.DateField(verbose_name='Date term ends')),
                ('exams_per_term', models.IntegerField(default=2, verbose_name='Number of exams per term')),
                ('term_validated', models.BooleanField(default=False, verbose_name='If the term has been validated')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.school')),
            ],
            options={
                'verbose_name': 'Term',
                'verbose_name_plural': 'Terms',
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], max_length=50, verbose_name='Day of the week')),
                ('startTime', models.TimeField(verbose_name='Time the class starts')),
                ('endTime', models.TimeField(verbose_name='Time the class ends')),
                ('daysOfWeek', models.JSONField(default=list, verbose_name='Days of the week as integers')),
                ('class_instance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='school.class')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.subject')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.terms')),
            ],
            options={
                'verbose_name': 'TimeTable',
                'verbose_name_plural': 'TimeTables',
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('staff_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='school.staff')),
                ('subject', models.ManyToManyField(default=None, related_name='subjects', to='school.subject', verbose_name='subject')),
            ],
            options={
                'verbose_name': ('Teacher',),
                'verbose_name_plural': 'Teachers',
            },
        ),
        migrations.CreateModel(
            name='StudentSubjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Grade')),
                ('seq_average', models.FloatField(blank=True, default=0, null=True, verbose_name='Average of sequence grades')),
                ('sequence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.sequence')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.subject')),
            ],
            options={
                'verbose_name': 'Student Subject',
                'verbose_name_plural': 'Student Subjects',
            },
        ),
        migrations.CreateModel(
            name='StudentClassRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('enrollment_date', models.DateField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, max_length=10, null=True, verbose_name='Grade of student')),
                ('class_instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.class')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.student')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCharge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField()),
                ('payment_date', models.DateField()),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_status', models.CharField(blank=True, max_length=20, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('depositor', models.CharField(blank=True, max_length=20, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_gateway', models.CharField(blank=True, max_length=50, null=True)),
                ('currency', models.CharField(blank=True, max_length=3, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_confirmation_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='create date')),
                ('created_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Email of user who creates model')),
                ('receiver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='service_charge_registration', to='school.registration')),
            ],
            options={
                'verbose_name': 'ServiceCharge',
                'verbose_name_plural': 'ServiceCharges',
            },
        ),
        migrations.AddField(
            model_name='sequence',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sequences', to='school.terms'),
        ),
        migrations.CreateModel(
            name='SchoolPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.ImageField(upload_to='media/')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.school')),
            ],
        ),
        migrations.AddField(
            model_name='registration',
            name='service_charge',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registration_service_charges', to='school.servicecharge'),
        ),
        migrations.AddField(
            model_name='registration',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.student'),
        ),
        migrations.AddField(
            model_name='registration',
            name='year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.program'),
        ),
        migrations.AddField(
            model_name='program',
            name='subscription',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.subscription'),
        ),
        migrations.AddField(
            model_name='program',
            name='terms',
            field=models.ManyToManyField(to='school.terms', verbose_name='program_terms'),
        ),
        migrations.AddField(
            model_name='payment',
            name='registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.registration'),
        ),
        migrations.CreateModel(
            name='MatriculeCounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant', models.CharField(max_length=255)),
                ('level', models.CharField(max_length=255)),
                ('last_number', models.IntegerField(default=0)),
            ],
            options={
                'unique_together': {('tenant', 'level')},
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_status', models.CharField(choices=[('active', 'Active'), ('new', 'New'), ('accepted', 'Accepted'), ('Low', 'Low'), ('unqualified', 'Unqualified')], default='active', max_length=256, verbose_name='Checks whether or not user is actively searching')),
                ('role', models.CharField(max_length=256, verbose_name='Role he/she is applying for')),
                ('cv', models.FileField(upload_to='applicant_cv', validators=[django.core.validators.FileExtensionValidator(['pdf', 'txt', 'docx'])])),
                ('summary', models.CharField(max_length=5000, verbose_name='Summary of job application')),
                ('tenant', models.CharField(blank=True, max_length=50, null=True, verbose_name='School you are applying into')),
                ('country', models.CharField(blank=True, max_length=500, null=True, verbose_name='Country of origin of applicant')),
                ('rejection_count', models.IntegerField(default=0, verbose_name='Number of times the applicant has been rejected')),
                ('application_date', models.DateTimeField(auto_now_add=True, verbose_name='Date and time of application')),
                ('interview_date', models.DateTimeField(blank=True, null=True, verbose_name='Date and time of interview')),
                ('years_of_experience', models.IntegerField(blank=True, null=True, verbose_name='Years of experience')),
                ('references', models.TextField(blank=True, null=True, verbose_name='References')),
                ('expected_salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Expected Salary')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='Feedback provided by the interviewer')),
                ('meeting_url', models.URLField(blank=True, null=True, verbose_name='URL for the interview meeting')),
                ('is_hired', models.BooleanField(default=False, verbose_name='Applicant has been hired for the position')),
                ('rejected', models.BooleanField(default=False, verbose_name='If the applicant has been rejected from the school')),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.basemodel')),
                ('recipient_name', models.CharField(max_length=300, verbose_name='Full names of user you want to invite')),
                ('recipient_email', models.EmailField(max_length=50, verbose_name='Email of users to send invititations to')),
                ('invite_status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined')], default='pending', max_length=20, verbose_name='State of the invitation')),
                ('tenant_name', models.CharField(max_length=50, verbose_name='School you are sending invites to')),
                ('role', models.CharField(choices=[('teacher', 'Teacher'), ('accountant', 'Accountant'), ('secretary', 'Secretary'), ('student', 'Student'), ('guardian', 'Guardian'), ('admin', 'Admin'), ('cleaner', 'Cleaner'), ('librarian', 'Librarian'), ('driver', 'Driver'), ('cook', 'Cook'), ('gardener', 'Gardener'), ('security', 'Security'), ('nurse', 'Nurse'), ('counselor', 'Counselor'), ('other', 'Other')], max_length=100, verbose_name='This refers to the role you are inviting the member for')),
                ('invitation_code', models.SlugField(editable=False, unique=True)),
                ('message', models.TextField(blank=True)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.school')),
            ],
            options={
                'verbose_name': 'Invitation',
                'verbose_name_plural': 'Invitations',
            },
            bases=('core.basemodel',),
        ),
        migrations.AddField(
            model_name='guardian',
            name='student',
            field=models.ManyToManyField(related_name='guardian_student_list', to='school.student'),
        ),
        migrations.AddField(
            model_name='guardian',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('average', models.FloatField(default=0, verbose_name='Student average for the term')),
                ('position', models.IntegerField(null=True, verbose_name='Student position in class')),
                ('result_generated', models.BooleanField(default=False, verbose_name='Result has been generated for the term')),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.class')),
                ('grade_list', models.ManyToManyField(related_name='student_rank_grades', to='school.studentsubjects')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.student')),
                ('term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.terms')),
            ],
            options={
                'ordering': ['-average'],
            },
        ),
        migrations.AddField(
            model_name='event',
            name='programs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.program'),
        ),
        migrations.AddField(
            model_name='department',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.school'),
        ),
        migrations.CreateModel(
            name='ClassFees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fee_amount', models.IntegerField(verbose_name='Total amount of money to be payed by students in this class')),
                ('first_installment', models.IntegerField(verbose_name='First installment of this fee')),
                ('second_installment', models.IntegerField(blank=True, null=True, verbose_name='Second installment of this fee')),
                ('third_installment', models.IntegerField(blank=True, null=True, verbose_name='Third installment of this fee')),
                ('service_charge_percentage', models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ('cls', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.class')),
            ],
            options={
                'verbose_name': ('class Fee',),
                'verbose_name_plural': 'class Fees',
            },
        ),
        migrations.AddField(
            model_name='class',
            name='instructor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='school.staff'),
        ),
        migrations.AddField(
            model_name='class',
            name='level',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='school.level'),
        ),
        migrations.AddField(
            model_name='class',
            name='promotion_class',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.class'),
        ),
        migrations.AddField(
            model_name='class',
            name='siblings',
            field=models.ManyToManyField(to='school.class'),
        ),
        migrations.AddField(
            model_name='class',
            name='students',
            field=models.ManyToManyField(through='school.StudentClassRelation', to='school.student'),
        ),
        migrations.AddField(
            model_name='class',
            name='subjects',
            field=models.ManyToManyField(related_name='classes', to='school.subject'),
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('is_present', models.BooleanField(default=False)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.student')),
                ('timetable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='school.timetable')),
            ],
        ),
    ]
